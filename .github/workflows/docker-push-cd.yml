name: CI/CD Pipeline

on:
  push:
    branches: [main]

jobs:
  # --- LINT + TEST + BUILD ---
  test-and-lint:
    name: Test / Lint / Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: |
          if [ -f yarn.lock ]; then
            yarn install --frozen-lockfile
          else
            npm ci
          fi

      - name: Run tests
        run: |
          if [ -f yarn.lock ]; then
            yarn test --silent
          else
            npm test --silent
          fi

      - name: Run linter
        run: |
          if [ -f yarn.lock ]; then
            yarn lint
          else
            npm run lint
          fi

      - name: Build app (if present)
        run: |
          node -e "process.exit(require('./package.json').scripts && require('./package.json').scripts.build ? 0 : 1)" \
            && ( if [ -f yarn.lock ]; then yarn build; else npm run build; fi ) \
            || echo "No build script found - skipping build"

  # --- DOCKER BUILD & PUSH ---
  docker-push:
    name: Build & Push Docker image
    runs-on: ubuntu-latest
    needs: [test-and-lint] # espera que termine el lint/test/build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU (multi-arch support)
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_REPOSITORY }}:${{ github.sha }}
            ${{ secrets.DOCKERHUB_REPOSITORY }}:latest
          build-args: |
            NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
            AUTH_SECRET=${{ secrets.AUTH_SECRET }}
            AUTH_GOOGLE_ID=${{ secrets.AUTH_GOOGLE_ID }}
            AUTH_GOOGLE_SECRET=${{ secrets.AUTH_GOOGLE_SECRET }}
            AUTH_GITHUB_ID=${{ secrets.AUTH_GITHUB_ID }}
            AUTH_GITHUB_SECRET=${{ secrets.AUTH_GITHUB_SECRET }}
            MONGODB_URI=${{ secrets.MONGODB_URI }}

  # --- DEPLOY TO RENDER ---
  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: [docker-push]
    steps:
      - name: Trigger Render Deploy Hook
        env:
          RENDER_DEPLOY_HOOK_URL: ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
        run: |
          echo "ðŸš€ Triggering Render deploy..."
          curl -X POST "$RENDER_DEPLOY_HOOK_URL"
