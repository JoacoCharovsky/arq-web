# name: CI/CD Pipeline

# on:
#   push:
#     branches: [main]

# jobs:
#   # --- TEST + LINT + BUILD ---
#   test-and-lint-build:
#     name: Test / Lint / Build
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: "20"
#           cache: "npm"

#       - name: Install dependencies
#         run: |
#           if [ -f yarn.lock ]; then
#             yarn install --frozen-lockfile
#           else
#             npm ci
#           fi

#       - name: Run tests
#         run: |
#           if [ -f yarn.lock ]; then
#             yarn test --silent
#           else
#             npm test --silent
#           fi

#       - name: Run linter
#         run: |
#           if [ -f yarn.lock ]; then
#             yarn lint
#           else
#             npm run lint
#           fi

#       - name: Build app (if present)
#         run: |
#           node -e "process.exit(require('./package.json').scripts && require('./package.json').scripts.build ? 0 : 1)" \
#             && ( if [ -f yarn.lock ]; then yarn build; else npm run build; fi ) \
#             || echo "No build script found - skipping build"

#   # --- DOCKER BUILD & PUSH ---
#   docker-push:
#     name: Build & Push Docker image
#     runs-on: ubuntu-latest
#     needs: [test-and-lint-build] # espera que termine test/lint/build
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Set up QEMU (multi-arch support)
#         uses: docker/setup-qemu-action@v2

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2

#       - name: Log in to Docker Hub
#         uses: docker/login-action@v3
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}

#       - name: Build and push Docker image
#         uses: docker/build-push-action@v4
#         with:
#           context: .
#           file: ./Dockerfile
#           push: true
#           tags: |
#             ${{ secrets.DOCKERHUB_REPOSITORY }}:${{ github.sha }}
#             ${{ secrets.DOCKERHUB_REPOSITORY }}:latest
#           build-args: |
#             NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
#             AUTH_SECRET=${{ secrets.AUTH_SECRET }}
#             AUTH_GOOGLE_ID=${{ secrets.AUTH_GOOGLE_ID }}
#             AUTH_GOOGLE_SECRET=${{ secrets.AUTH_GOOGLE_SECRET }}
#             AUTH_GITHUB_ID=${{ secrets.AUTH_GITHUB_ID }}
#             AUTH_GITHUB_SECRET=${{ secrets.AUTH_GITHUB_SECRET }}
#             MONGODB_URI=${{ secrets.MONGODB_URI }}

#   # --- DEPLOY TO RENDER ---
#   deploy:
#     name: Deploy to Render
#     runs-on: ubuntu-latest
#     needs: [docker-push]
#     steps:
#       - name: Trigger Render Deploy Hook
#         env:
#           RENDER_DEPLOY_HOOK_URL: ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
#         run: |
#           echo "üöÄ Triggering Render deploy..."
#           RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "$RENDER_DEPLOY_HOOK_URL")
#           BODY=$(echo "$RESPONSE" | head -n1)
#           STATUS=$(echo "$RESPONSE" | tail -n1)
#           echo "Response body: $BODY"
#           echo "HTTP status: $STATUS"
#           if [ "$STATUS" -ne 200 ]; then
#             echo "‚ùå Render deploy failed."
#             exit 1
#           else
#             echo "‚úÖ Render deploy triggered successfully!"
#           fi

# --- UPLOAD SENTRY SOURCEMAPS ---
upload-sourcemaps:
  name: Upload Sentry Source Maps
  runs-on: ubuntu-latest
  # needs: [docker-push, test-and-lint-build] # espera que build est√© listo
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "20"

    - name: Install dependencies
      run: |
        if [ -f yarn.lock ]; then
          yarn install --frozen-lockfile
        else
          npm ci --include=dev
        fi

    - name: Build app (for source maps)
      run: |
        if [ -f yarn.lock ]; then
          yarn build
        else
          npm run build
        fi

    - name: Create Sentry release
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
        SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
      run: |
        npx @sentry/cli releases new ${{ github.sha }}
        npx @sentry/cli releases set-commits ${{ github.sha }} --auto

    - name: Upload source maps to Sentry
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
        SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        NODE_ENV: production
      run: npx @sentry/cli sourcemaps upload --release=${{ github.sha }} .next

    - name: Finalize Sentry release
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
        SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
      run: npx @sentry/cli releases finalize ${{ github.sha }}
